from typing import Dict, Set

""" Accessed variables for partial loading. """

# Extracted from supawit/loadnames.
PARTIAL_LOAD_NAMES: Dict[str, Dict[int, Set[str]]] = {
    "rmlist": {
        0: {"f", "l", "h", "random", "secrets", "l2", "lc", "l_share", "range", "__builtins__", "__spec__"},
        1: {"len", "idx", "l", "random", "secrets", "range"},
        2: {"len", "idx", "l", "random", "secrets", "range"},
        3: {"len", "idx", "l", "random", "secrets", "range"},
        4: {"len", "idx", "l", "random", "secrets", "range"},
        5: {"len", "idx", "l", "random", "secrets", "range"},
        6: {"len", "idx", "l", "random", "secrets", "range"},
        7: {"len", "idx", "l", "random", "secrets", "range"},
        8: {"len", "idx", "l", "random", "secrets", "range"},
        9: {"len", "idx", "l", "random", "secrets", "range"},
    },
    "storesfg": {
        0: {"gc", "pd", "sm", "plt", "px", "os", "sns", "__spec__", "warnings", "np", "__builtins__"},
        1: {"stores", "pd", "transactions", "train", "test"},
        2: {"transactions"},
        3: {"pd", "temp", "print", "transactions", "train", "px"},
        4: {"px", "a", "transactions"},
        5: {"px", "a", "transactions"},
        6: {"temp", "px"},
        7: {"px", "a", "transactions"},
        8: {"p", "list", "pd", "px", "oil", "np"},
        9: {"axes", "pd", "temp", "print", "plt", "fig", "oil"},
        10: {"c", "axes", "pd", "str", "fam", "plt", "fig", "enumerate", "a", "oil", "train", "i"},
        11: {"pd", "plt", "a", "mask", "sns", "train", "np"},
        12: {"train", "px", "a"},
        13: {"print", "train"},
        14: {"train", "c"},
        15: {"gc", "c", "print", "train"},
        16: {"c", "pd", "range", "len", "zero_prediction", "i"},
        17: {"train", "c"},
        18: {"plt", "ax", "fig", "train"},
        19: {"train", "px", "a"},
        20: {"train", "px", "a"},
        21: {"print", "train"},
        22: {"stores", "pd", "d", "train", "px"},
        23: {"one_hot_encoder", "train", "test", "np", "stores", "d", "gc", "list", "pd"},
        24: {"pd", "AB_Test", "ab", "d", "np", "he_cols", "i"},
        25: {"d"},
        26: {"create_date_features", "np", "d", "pd"},
        27: {"d"},
        28: {"d", "pd"},
        29: {"d", "pd"},
        30: {"d", "pd"},
        31: {"sm", "temp", "plt", "fig", "a", "d", "ax", "enumerate", "num", "i"},
        32: {"px", "a", "d"},
        33: {"print", "str", "a", "train", "i"},
        34: {"range", "plt", "fig", "j", "a", "ax", "b", "i"},
        35: {"ewm_features", "str", "a", "lags", "alphas"},
        36: {"a"},
        37: set(),
    },
    "itsttime": {
        0: {
            "class_likelihood_ratios",
            "TimeSeriesSplit",
            "balanced_accuracy_score",
            "LassoLarsIC",
            "MultiTaskLasso",
            "PassiveAggressiveClassifier",
            "GridSearchCV",
            "check_cv",
            "get_scorer_names",
            "Hinge",
            "PoissonRegressor",
            "Log",
            "dcg_score",
            "StratifiedShuffleSplit",
            "mean_tweedie_deviance",
            "RepeatedStratifiedKFold",
            "LearningCurveDisplay",
            "precision_recall_curve",
            "v_measure_score",
            "hinge_loss",
            "cohen_kappa_score",
            "LeaveOneOut",
            "LeavePGroupsOut",
            "StratifiedGroupKFold",
            "pd",
            "adjusted_rand_score",
            "consensus_score",
            "fbeta_score",
            "lars_path",
            "sklearn",
            "matthews_corrcoef",
            "SGDRegressor",
            "explained_variance_score",
            "TweedieRegressor",
            "pairwise_distances",
            "RocCurveDisplay",
            "ridge_regression",
            "jaccard_score",
            "DistanceMetric",
            "davies_bouldin_score",
            "ValidationCurveDisplay",
            "adjusted_mutual_info_score",
            "sns",
            "orthogonal_mp_gram",
            "DetCurveDisplay",
            "KFold",
            "__spec__",
            "root_mean_squared_log_error",
            "permutation_test_score",
            "mean_squared_error",
            "mutual_info_score",
            "brier_score_loss",
            "SquaredLoss",
            "roc_auc_score",
            "nan_euclidean_distances",
            "LassoCV",
            "re",
            "BaseShuffleSplit",
            "BayesianRidge",
            "Lars",
            "LinearRegression",
            "GroupKFold",
            "accuracy_score",
            "SGDClassifier",
            "det_curve",
            "d2_absolute_error_score",
            "fowlkes_mallows_score",
            "RandomizedSearchCV",
            "PrecisionRecallDisplay",
            "Lasso",
            "LeaveOneGroupOut",
            "precision_recall_fscore_support",
            "multilabel_confusion_matrix",
            "__builtins__",
            "LarsCV",
            "make_scorer",
            "precision_score",
            "mean_poisson_deviance",
            "PredefinedSplit",
            "HuberRegressor",
            "cluster",
            "BaseCrossValidator",
            "f1_score",
            "mean_gamma_deviance",
            "euclidean_distances",
            "mean_absolute_percentage_error",
            "LassoLarsCV",
            "lasso_path",
            "median_absolute_error",
            "label_ranking_loss",
            "orthogonal_mp",
            "lars_path_gram",
            "GroupShuffleSplit",
            "ndcg_score",
            "MultiTaskLassoCV",
            "Huber",
            "MultiTaskElasticNetCV",
            "Counter",
            "ElasticNet",
            "PredictionErrorDisplay",
            "get_scorer",
            "ParameterGrid",
            "ConfusionMatrixDisplay",
            "d2_tweedie_score",
            "Perceptron",
            "confusion_matrix",
            "ModifiedHuber",
            "ElasticNetCV",
            "OrthogonalMatchingPursuitCV",
            "homogeneity_score",
            "coverage_error",
            "recall_score",
            "log_loss",
            "ParameterSampler",
            "check_scoring",
            "pairwise_distances_argmin_min",
            "cross_val_predict",
            "normalized_mutual_info_score",
            "classification_report",
            "mean_absolute_error",
            "label_ranking_average_precision_score",
            "Ridge",
            "MultiTaskElasticNet",
            "cross_val_score",
            "average_precision_score",
            "RidgeClassifier",
            "QuantileRegressor",
            "PassiveAggressiveRegressor",
            "SGDOneClassSVM",
            "LassoLars",
            "RidgeCV",
            "pairwise_distances_argmin",
            "LogisticRegression",
            "root_mean_squared_error",
            "zero_one_loss",
            "OrthogonalMatchingPursuit",
            "RepeatedKFold",
            "train_test_split",
            "completeness_score",
            "hamming_loss",
            "validation_curve",
            "homogeneity_completeness_v_measure",
            "silhouette_score",
            "TheilSenRegressor",
            "r2_score",
            "cross_validate",
            "silhouette_samples",
            "mean_squared_log_error",
            "d2_pinball_score",
            "LeavePOut",
            "top_k_accuracy_score",
            "RANSACRegressor",
            "auc",
            "plt",
            "RidgeClassifierCV",
            "enet_path",
            "roc_curve",
            "np",
            "ARDRegression",
            "mean_pinball_loss",
            "learning_curve",
            "os",
            "max_error",
            "GammaRegressor",
            "ShuffleSplit",
            "pairwise_kernels",
            "rand_score",
            "LogisticRegressionCV",
            "StratifiedKFold",
            "pair_confusion_matrix",
            "calinski_harabasz_score",
            "pairwise_distances_chunked",
        },
        1: {"print", "DATA_PATH", "os", "filename", "sorted"},
        2: {"df_seeds", "pd", "DATA_PATH"},
        3: {"df_season_results", "pd", "DATA_PATH"},
        4: {"df_season_results"},
        5: {"df_season_results"},
        6: {"df_season_results", "num_win"},
        7: {"df_season_results", "num_loss"},
        8: {"df_season_results", "gap_win"},
        9: {"df_season_results", "gap_loss"},
        10: {"df_season_results", "df_features_season_w", "df_features_season_l"},
        11: {"df_features_season_w", "pd", "df_features_season", "df_features_season_l"},
        12: {"num_win", "gap_loss", "num_loss", "gap_win", "df_features_season"},
        13: {"df_features_season"},
        14: {"df_features_season"},
        15: {"df_features_season"},
        16: {"df_tourney_results", "pd", "DATA_PATH"},
        17: set(),
        18: {"df", "df_tourney_results"},
        19: {"df", "df_seeds", "pd"},
        20: {"df", "df_seeds", "pd"},
        21: {"treat_seed"},
        22: {"int", "df", "re", "treat_seed"},
        23: {"df"},
        24: {"df", "pd", "df_features_season"},
        25: {"df", "pd", "df_features_season"},
        26: {"df"},
        27: set(),
        28: set(),
        29: set(),
        30: {"add_loosing_matches"},
        31: {"df", "add_loosing_matches", "pd"},
        32: {"df"},
        33: {"df", "col", "cols_to_diff"},
        34: {"df_test", "pd", "DATA_PATH"},
        35: {"df_test", "int"},
        36: {"df_test"},
        37: {"df_test", "df_seeds", "pd"},
        38: {"df_test", "df_seeds", "pd"},
        39: {"int", "df_test", "re", "treat_seed"},
        40: {"df_test", "pd", "df_features_season"},
        41: {"df_test", "pd", "df_features_season"},
        42: set(),
        43: set(),
        44: {"df_test", "col", "cols_to_diff"},
        45: {"df", "int"},
        46: {"features"},
        47: set(),
        48: {"rescale"},
        49: {"kfold"},
        50: {
            "kfold",
            "LogisticRegression",
            "__builtins__",
            "df_test",
            "features",
            "print",
            "df",
            "np",
            "pred_tests",
            "rescale",
        },
        51: {"sns", "df_test", "_", "pred_test", "pred_tests", "np"},
        52: {"df_test", "final_sub"},
        53: {"final_sub"},
    },
    "buildats": {
        0: {
            "read_csv",
            "Pipeline",
            "IncrementalPCA",
            "preprocessing",
            "LinearDiscriminantAnalysis",
            "SVC",
            "colours",
            "plot_line2",
            "f_regression",
            "__builtins__",
            "GaussianRandomProjection",
            "time",
            "RandomForestClassifier",
            "DecisionTreeClassifier",
            "LocallyLinearEmbedding",
            "np",
            "make_subplots",
            "__spec__",
            "set_option",
            "SelectKBest",
            "XGBRegressor",
            "MDS",
            "KernelPCA",
            "FastICA",
            "cmap",
            "corrMat",
            "scatterPlot",
            "plot_importance",
            "MiniBatchDictionaryLearning",
            "red_mem",
            "cm",
            "plt",
            "StandardScaler",
            "cross_val_score",
            "px",
            "pd",
            "confusion_matrix",
            "os",
            "MLPClassifier",
            "AdaBoostClassifier",
            "TSNE",
            "MinMaxScaler",
            "CatBoostClassifier",
            "sns",
            "RobustScaler",
            "plot_vsubplots",
            "GaussianNB",
            "SparseRandomProjection",
            "plot_line",
            "learning_curve",
            "train_test_split",
            "TruncatedSVD",
            "XGBClassifier",
            "classification_report",
            "TimeSeries_Split",
            "warnings",
            "RandomForestRegressor",
            "SparsePCA",
            "PCA",
            "LogisticRegression",
            "Isomap",
            "ExtraTreesClassifier",
            "GridSearchCV",
            "KNeighborsClassifier",
            "Normalizer",
            "accuracy_score",
            "CatBoostRegressor",
            "GradientBoostingClassifier",
            "KFold",
            "shap",
            "bar_plot",
            "go",
        },
        1: {"data_period", "path", "pytz", "datetime", "slice", "plot_period", "dateparse"},
        2: {"float", "df", "path", "pytz", "datetime", "pd", "dateparse"},
        3: set(),
        4: {"data_period", "df", "type", "df_te", "df_tr", "int", "train_test_split", "print", "TimeSeries_Split"},
        5: {"range", "sns", "df_tr", "plt", "NaN_values", "bar_plot", "len"},
        6: {"df_tr"},
        7: {"forward_fill_na", "df_te", "df_tr"},
        8: {"df_te", "df_tr"},
        9: {"df_tr"},
        10: {"df_tr1", "df_te", "create_target", "df_tr", "df_te1", "np", "print"},
        11: {"df_tr1", "plot_vsubplots", "dict", "make_subplots", "go"},
        12: {"df_tr1", "plot_line", "go", "dict", "lst_MAV", "make_subplots", "plot_period", "len", "ldf"},
        13: {"df_te1", "df_tr1"},
        14: {"sns", "cmap", "df_tr1", "corrMat", "plt"},
        15: {"df_te2", "df_tr2", "df_tr1"},
        16: {"rsi", "ema", "mom", "roc", "sto", "__doc__", "ma"},
        17: {"tech_indi"},
        18: {
            "len",
            "rsi",
            "ema",
            "df_te2",
            "plot_line",
            "tech_indi",
            "mom",
            "sto",
            "go",
            "dict",
            "np",
            "plot_period",
            "pd",
            "str",
            "ma",
            "df_tr2",
        },
        19: {"df_tr2"},
        20: {"sns", "cmap", "corrMat", "plt", "df_tr2"},
        21: {"df_te2", "drp_feat", "df_tr2"},
        22: {"range", "sns", "NaN_values", "plt", "df_tr2", "bar_plot", "len"},
        23: {"df_te2", "df_tr2"},
        24: {
            "CatBoostClassifier",
            "LinearDiscriminantAnalysis",
            "GaussianNB",
            "RandomForestClassifier",
            "KNeighborsClassifier",
            "DecisionTreeClassifier",
            "GradientBoostingClassifier",
            "XGBClassifier",
            "models",
        },
        25: {"modelEval"},
        26: {
            "any",
            "sns",
            "df_tr1",
            "KFold",
            "time",
            "__builtins__",
            "cross_val_score",
            "plt",
            "train_test_split",
            "accuracy_score",
            "np",
            "pd",
            "print",
            "modelEval",
            "models",
        },
        27: {
            "CatBoostClassifier",
            "preprocessing",
            "sns",
            "RandomForestRegressor",
            "cmap",
            "corrMat",
            "f_regression",
            "plot_importance",
            "CatBoostRegressor",
            "fi",
            "shap",
            "SelectKBest",
            "XGBRegressor",
        },
        28: {
            "range",
            "zip",
            "pd",
            "XGBRegressor",
            "preprocessing",
            "RandomForestRegressor",
            "corrMat",
            "f_regression",
            "dict",
            "abs",
            "np",
            "CatBoostRegressor",
            "fi",
            "px",
            "shap",
            "SelectKBest",
            "df_tr2",
            "len",
        },
        29: {"df_tr2_FI", "df_tr2"},
        30: {
            "any",
            "df_tr2_FI",
            "sns",
            "KFold",
            "time",
            "cross_val_score",
            "plt",
            "train_test_split",
            "accuracy_score",
            "np",
            "pd",
            "print",
            "modelEval",
            "models",
        },
        31: {"dimRed"},
        32: {"FastICA", "sns", "scatterPlot", "plt", "dimRed", "df_tr2_ICA", "pd", "df_tr2"},
        33: {
            "any",
            "sns",
            "KFold",
            "time",
            "cross_val_score",
            "plt",
            "train_test_split",
            "df_tr2_ICA",
            "accuracy_score",
            "pd",
            "print",
            "np",
            "modelEval",
            "models",
        },
        34: {
            "FastICA",
            "MinMaxScaler",
            "RobustScaler",
            "sns",
            "df_tr2_ICA_sca0",
            "scatterPlot",
            "plt",
            "dimRed",
            "StandardScaler",
            "__doc__",
            "Normalizer",
            "pd",
            "df_tr2",
        },
        35: {
            "any",
            "sns",
            "df_tr2_ICA_sca0",
            "KFold",
            "time",
            "cross_val_score",
            "plt",
            "train_test_split",
            "accuracy_score",
            "np",
            "pd",
            "print",
            "modelEval",
            "models",
        },
        36: {
            "FastICA",
            "MinMaxScaler",
            "RobustScaler",
            "sns",
            "scatterPlot",
            "df_tr2_ICA_sca1",
            "plt",
            "dimRed",
            "StandardScaler",
            "__doc__",
            "Normalizer",
            "pd",
            "df_tr2",
        },
        37: {
            "any",
            "sns",
            "KFold",
            "time",
            "df_tr2_ICA_sca1",
            "cross_val_score",
            "plt",
            "train_test_split",
            "accuracy_score",
            "np",
            "pd",
            "print",
            "modelEval",
            "models",
        },
        38: {
            "FastICA",
            "MinMaxScaler",
            "RobustScaler",
            "sns",
            "scatterPlot",
            "df_tr2_ICA_sca2",
            "plt",
            "dimRed",
            "StandardScaler",
            "__doc__",
            "Normalizer",
            "pd",
            "df_tr2",
        },
        39: {
            "any",
            "sns",
            "KFold",
            "time",
            "df_tr2_ICA_sca2",
            "cross_val_score",
            "plt",
            "train_test_split",
            "accuracy_score",
            "np",
            "pd",
            "print",
            "modelEval",
            "models",
        },
        40: {
            "FastICA",
            "MinMaxScaler",
            "RobustScaler",
            "sns",
            "df_tr2_ICA_sca3",
            "scatterPlot",
            "plt",
            "dimRed",
            "StandardScaler",
            "__doc__",
            "Normalizer",
            "pd",
            "df_tr2",
        },
        41: {
            "any",
            "sns",
            "df_tr2_ICA_sca3",
            "time",
            "KFold",
            "cross_val_score",
            "plt",
            "train_test_split",
            "accuracy_score",
            "np",
            "pd",
            "print",
            "modelEval",
            "models",
        },
    },
    "betterxb": {
        0: {"__spec__", "smape", "vsmape", "gc", "__builtins__", "BASE", "np", "tqdm", "xgb", "pd"},
        1: {"pd", "BASE", "census", "print"},
        2: {"test", "print", "raw", "BASE", "train", "sub", "pd"},
        3: {"raw", "lag"},
        4: {"thr", "o", "i", "cnt", "outliers", "raw", "var", "range", "np", "tqdm", "tmp", "difa", "indices", "abs", "len"},
        5: {"raw", "lag"},
        6: {"raw"},
        7: {"raw"},
        8: {"raw"},
        9: {"raw", "dt"},
        10: {"build_features"},
        11: {"print", "features", "raw", "range", "feats", "build_features"},
        12: {"raw"},
        13: {
            "train_indices",
            "smape",
            "ACT_THR",
            "features",
            "model",
            "range",
            "ypred",
            "blacklist",
            "valid_indices",
            "lastval",
            "raw",
            "blacklistcfips",
            "len",
            "dt",
            "ind",
            "np",
            "xgb",
            "df",
            "BEST_ROUNDS",
            "ABS_THR",
            "print",
            "VAL",
            "TS",
            "best_rounds",
        },
        14: {"raw", "vsmape", "np", "len"},
        15: set(),
        16: set(),
        17: set(),
        18: set(),
        19: set(),
        20: set(),
        21: set(),
        22: {"raw", "dt"},
        23: {"dt", "len"},
        24: {"dt", "str"},
        25: {"dt", "str", "d", "raw"},
        26: set(),
        27: {"raw"},
        28: {"np", "BEST_ROUNDS"},
        29: {"best_rounds", "np", "BEST_ROUNDS", "int"},
        30: {
            "train_indices",
            "ACT_THR",
            "ABS_THR",
            "valid_indices",
            "print",
            "features",
            "lastval",
            "raw",
            "ypred",
            "dt",
            "TS",
            "xgb",
            "model0",
            "best_rounds",
            "model1",
        },
        31: {"df", "blacklist", "ACT_THR", "ABS_THR", "lastval", "raw", "dt", "TS", "blacklistcfips"},
        32: {"raw"},
        33: {"raw", "dt", "test"},
    },
    "tpsmay22": {
        0: {"np", "train", "__builtins__", "__spec__", "test", "sub", "pd", "warnings", "print"},
        1: {"test", "train", "print"},
        2: {"test", "train", "print"},
        3: {"test", "train", "print"},
        4: {"train", "print"},
        5: {"float_features", "int_features", "test", "object_features", "list", "print"},
        6: {"int_features", "train", "print"},
        7: {"train", "print", "object_features"},
        8: {"value_counts_all", "HTML"},
        9: {"int_features", "train", "value_counts_all", "pd", "HTML"},
        10: {"int_features", "value_counts_all", "test", "pd", "HTML"},
        11: {"plt", "plot_distributions", "sns"},
        12: {"histogram_correlation_plot"},
        13: {"plot_distributions", "round", "float_features", "plt", "sns", "train", "enumerate", "len"},
        14: {"round", "float_features", "histogram_correlation_plot", "plt", "np", "train", "enumerate", "len"},
        15: {"plot_distributions", "round", "plt", "int_features", "sns", "train", "enumerate", "len"},
        16: {"round", "histogram_correlation_plot", "plt", "np", "int_features", "train", "enumerate", "len"},
        17: {"display_p_values"},
        18: {"round", "float_features", "train", "pd", "display_p_values", "print"},
        19: {"round", "int_features", "train", "pd", "display_p_values", "print"},
        20: {"create_features"},
        21: {"ord", "set", "train", "test_fe", "test", "train_fe", "pd", "create_features", "list", "len", "range"},
        22: {"plot_distributions", "round", "plt", "sns", "enumerate", "fe_object_features", "train_fe", "len", "range"},
        23: {"plot_pca_traintest", "plot_pca_target"},
        24: {"features", "plt", "plot_pca_target", "sns", "train_fe", "pd"},
        25: {"gc"},
        26: {
            "features",
            "plot_pca_traintest",
            "plt",
            "hard_rows_list",
            "np",
            "sns",
            "test_fe",
            "train_fe",
            "len",
            "range",
            "print",
        },
        27: {"hard_rows_list"},
        28: {"plot_umap"},
        29: {"CatBoostClassifier", "model", "fe_object_features", "y_train", "X_train", "train_fe"},
        30: {"model", "test_fe", "X_test", "sub"},
        31: {"plot_feature_importance"},
        32: {"model", "plt", "np", "sns", "plot_feature_importance", "X_train", "pd"},
    },
    # "denoisdw": {
    # },
    # "denoisft": {
    # },
    "ai4code": {
        0: {"trange", "__builtins__", "tqdm", "wordcloud", "plt", "os", "np", "px", "pd", "__spec__", "go", "json"},
        1: {"df_ancestors", "df_orders", "df", "pd"},
        2: {"os", "print", "len"},
        3: {"df"},
        4: {"labels", "dict", "len", "mkd_df", "values", "fig", "colors", "df", "go", "print", "code_df"},
        5: {"print", "code_df"},
        6: {"round", "code_lengths", "len", "max", "range", "np", "min", "print", "code_df"},
        7: {"ax", "code_lengths", "fig", "plt"},
        8: {"wordcloud", "plt", "wordcloud_notes", "code_df", "ax", "fig"},
        9: {"mkd_df", "print"},
        10: {"round", "mkd_lengths", "len", "mkd_df", "max", "range", "np", "min", "print"},
        11: {"ax", "mkd_lengths", "fig", "plt"},
        12: {"wordcloud", "plt", "mkd_df", "wordcloud_notes", "ax", "fig"},
        13: {
            "counts_df",
            "round",
            "notebook_ids",
            "os",
            "len",
            "markdown_counts",
            "np",
            "i",
            "int",
            "print",
            "code_counts",
            "str",
            "pd",
            "temp_df",
            "trange",
            "df",
        },
        14: {"counts_df", "k", "px", "top_k", "fig"},
        15: {"counts_df", "round", "print"},
        16: {"counts_df", "px", "fig"},
        17: {"counts_df", "round", "print"},
        18: {"counts_df", "px", "fig"},
        19: {"counts_df", "len", "either_one", "both_one", "markdown_count_one", "print", "code_count_one"},
        20: {"counts_df", "dict", "px", "fig"},
    },
    # "covid193": {
    # },
    "twittnet": {
        0: {"os", "nx", "plt", "np", "datetime", "pprint", "__spec__", "__builtins__", "pd"},
        1: {"data_dir"},
        2: {"data_dir", "pd", "os", "tweet_df"},
        3: {"tweet_df"},
        4: {"retweet_df", "tweet_df"},
        5: {"retweet_df"},
        6: {"topretweeted", "retweet_df", "topretweets"},
        7: {"print", "topretweets"},
        8: {"plt", "np", "topretweets"},
        9: {"print", "topretweeted"},
        10: {"retweet_df", "edge_df"},
        11: {"nx", "G", "print", "edge_df"},
        12: {"print", "G", "nx"},
        13: {"sorted", "weak_sizes", "nx", "len", "print", "G"},
        14: {"in_degrees", "G", "in_degrees_sorted", "sorted"},
        15: {"sorted", "G", "weighted_in_degrees_sorted", "weighted_in_degrees"},
        16: {"topretweeted_screen_name", "nx", "nx_cc", "i", "print", "G", "topretweeted", "range", "str"},
    },
    "skltweet": {
        0: {"__builtins__", "pd", "re", "__spec__", "TextBlob", "np", "plt"},
        1: {"data_dir"},
        2: {"pd", "df", "data_dir"},
        3: {"df"},
        4: {"df", "print", "re", "idx", "TextBlob", "tweet_text_sentiment", "dff", "tweet_text", "row", "count"},
        5: {"print", "dff"},
        6: {"dff", "plt"},
        7: {"dff"},
        8: {"dff", "plt"},
        9: {"dff"},
        10: {"dff"},
        11: {"CountVectorizer", "vectorizer"},
        12: {"features", "dff", "vectorizer"},
        13: {"print", "y", "X", "y_test", "dff", "y_train", "X_test", "X_train", "features", "train_test_split"},
        14: {"LogisticRegression", "log_model"},
        15: {"X_train", "log_model", "y_train"},
        16: {"X_test", "y_pred", "log_model"},
        17: {"accuracy_score", "print", "y_pred", "y_test"},
        18: {"cross_validate", "y", "X", "log_model"},
        19: {"cross_validate", "y", "X", "GaussianNB", "gnb_model"},
        20: set(),
        21: set(),
        22: {"cross_validate", "y", "X", "MultinomialNB", "mnb_model"},
        23: {"accuracy_score", "print", "y_pred", "y_test"},
        24: {"cross_validate", "y", "X", "cnb_model", "ComplementNB"},
        25: {
            "retweet_ids",
            "df",
            "print",
            "subjectivity",
            "index",
            "retweet_id_list",
            "positive_tweets",
            "negative_tweets",
            "re",
            "TextBlob",
            "tweet_text",
            "val_inc",
            "row",
            "tweet_text_sentiment",
            "tweet_text_list",
            "str",
            "polarity",
            "set",
        },
        26: {"pd", "retweet_id_list", "polarity_df"},
        27: {"polarity_df"},
        28: {"polarity_df", "tweet_text_list"},
        29: {"polarity_df", "polarity"},
        30: {"polarity_df"},
        31: {"polarity_df", "data_dir"},
        32: {"pd", "subjectivity", "retweet_id_list", "data_dir", "tweet_text_list", "subjectivity_df"},
        33: {"subjectivity_df"},
        34: {"positive_tweets_df", "negative_text", "negative_tweets_df", "polarity_df", "positive_text"},
        35: {
            "subjective_tweets_df",
            "objective_text",
            "subjective_text",
            "objective_tweets_df",
            "polarity_df",
            "subjectivity_df",
        },
        36: {"positive_text", "negative_text", "data_dir"},
        37: {"subjective_text", "objective_text", "data_dir"},
        38: {"labels_pos", "text_pos", "i", "data_dir", "f", "open"},
        39: {"i", "data_dir", "labels_neg", "f", "text_neg", "open"},
        40: {
            "labels_pos",
            "training_labels",
            "text_pos",
            "training_text",
            "int",
            "len",
            "test_labels",
            "labels_neg",
            "text_neg",
            "test_text",
        },
        41: {"breakpoint", "test_frac", "testing", "int", "len", "dff", "training"},
        42: {"training_text", "features_nd", "vectorizer", "features", "test_text"},
        43: {
            "y_test",
            "training_labels",
            "training_text",
            "len",
            "features_nd",
            "y_train",
            "X_test",
            "X_train",
            "train_test_split",
        },
    },
}
